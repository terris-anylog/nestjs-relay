{"version":3,"file":"nestjs-relay.js","sources":["../../src/global-object-identification/global-id/resolved-global-id.class.ts","../../src/global-object-identification/global-id/global-id-field.decorator.ts","../../src/global-object-identification/global-id/global-id-field.resolver.ts","../../src/global-object-identification/global-id/global-id.scalar.ts","../../src/global-object-identification/node/node.interface.ts","../../src/global-object-identification/node/node-field.resolver.ts","../../src/common/scalar.utils.ts","../../src/common/metadata-storage.class.ts","../../src/global-object-identification/node/node-type.decorator.ts","../../src/mutation/input-arg.decorator.ts","../../src/mutation/utils/capitalise.util.ts","../../src/mutation/utils/get-client-mutation-id.util.ts","../../src/mutation/input-arg/input.mixin.ts","../../src/mutation/input-arg/input-arg.factory.ts","../../src/mutation/payload-type/payload.mixin.ts","../../src/mutation/payload-type/payload-type.factory.ts","../../src/mutation/utils/ensure-promise.ts","../../src/mutation/relay-mutation.decorator.ts","../../src/connection/args/backward-connection-args.type.ts","../../src/connection/args/connection-args.type.ts","../../src/connection/args/forward-connection-args.type.ts","../../src/connection/page-info.type.ts","../../src/connection/connection-type.factory.ts","../../src/connection/resolve-connection-field.decorator.ts"],"sourcesContent":["import { ResolvedGlobalId as RelayResolvedGlobalId } from 'graphql-relay';\n\nexport class ResolvedGlobalId implements RelayResolvedGlobalId {\n  type!: string;\n  id!: string;\n\n  constructor(args: RelayResolvedGlobalId) {\n    this.type = args.type;\n    this.id = args.id;\n  }\n\n  toString() {\n    return this.id;\n  }\n\n  toNumber() {\n    return Number(this.id);\n  }\n}\n\nexport const typeResolvedGlobalId = () => ResolvedGlobalId;\n\nexport const typeResolvedGlobalIds = () => [ResolvedGlobalId];\n","import { ResolveField, FieldOptions } from '@nestjs/graphql';\nimport { typeResolvedGlobalId } from './resolved-global-id.class';\n\nexport type GlobalIdFieldOptions = Pick<FieldOptions, 'complexity'>;\n\nexport const GlobalIdField = (options?: GlobalIdFieldOptions) =>\n  ResolveField(typeResolvedGlobalId, {\n    name: 'id',\n    nullable: false,\n    ...options,\n  });\n","import { Type } from '@nestjs/common';\nimport { Resolver, Parent, Info } from '@nestjs/graphql';\nimport { GraphQLObjectType } from 'graphql';\nimport { GlobalId } from './global-id.type';\nimport { ResolvedGlobalId } from './resolved-global-id.class';\nimport { GlobalIdField, GlobalIdFieldOptions } from './global-id-field.decorator';\n\nexport interface ResolverParent {\n  id: GlobalId;\n}\n\nexport interface ResolverInfo {\n  parentType: Pick<GraphQLObjectType, 'name'>;\n}\n\nexport interface GlobalIdFieldResolver {\n  id(parent: ResolverParent | null, info: ResolverInfo): ResolvedGlobalId;\n}\n\nexport function GlobalIdFieldResolver<T>(\n  classRef: Type<T>,\n  idFieldOptions?: GlobalIdFieldOptions,\n): Type<GlobalIdFieldResolver> {\n  const globalIdFieldOptions = idFieldOptions || {};\n\n  @Resolver(classRef, { isAbstract: true })\n  abstract class GlobalIdFieldResolverHost {\n    @GlobalIdField(globalIdFieldOptions)\n    id(@Parent() parent: ResolverParent, @Info() info: ResolverInfo): ResolvedGlobalId {\n      if (!parent || !parent.id) {\n        throw new Error(`Cannot resolve id when 'parent' or 'parent.id' is null`);\n      }\n      switch (typeof parent.id) {\n        case 'object':\n          return parent.id;\n        case 'string':\n          return new ResolvedGlobalId({\n            type: info.parentType.name,\n            id: parent.id,\n          });\n        case 'number':\n          return new ResolvedGlobalId({\n            type: info.parentType.name,\n            id: parent.id.toString(),\n          });\n      }\n    }\n  }\n  return GlobalIdFieldResolverHost as Type<GlobalIdFieldResolver>;\n}\n","import { Scalar, CustomScalar } from '@nestjs/graphql';\nimport { fromGlobalId, toGlobalId } from 'graphql-relay';\nimport { ValueNode, Kind, GraphQLError } from 'graphql';\nimport { typeResolvedGlobalId, ResolvedGlobalId } from './resolved-global-id.class';\n\n@Scalar('ID', typeResolvedGlobalId)\nexport class GlobalIdScalar implements CustomScalar<string, ResolvedGlobalId> {\n  parseValue(value: string): ResolvedGlobalId {\n    const { id, type } = fromGlobalId(value);\n    if (!id || !type) {\n      throw new GraphQLError(`Invalid ID: ${value}`);\n    }\n    return new ResolvedGlobalId({ type, id });\n  }\n\n  serialize(value: ResolvedGlobalId): string {\n    return toGlobalId(value.type, value.id);\n  }\n\n  parseLiteral(ast: ValueNode): ResolvedGlobalId {\n    if (ast.kind !== Kind.STRING) {\n      throw new GraphQLError(`Invalid ID type: ${ast.kind}`);\n    }\n    const { id, type } = fromGlobalId(ast.value);\n    if (!id || !type) {\n      throw new GraphQLError(`Invalid ID: ${ast.value}`);\n    }\n    return new ResolvedGlobalId({ type, id });\n  }\n}\n","import { Field, InterfaceType } from '@nestjs/graphql';\nimport { ResolvedGlobalId } from '../global-id';\n\n@InterfaceType('Node', {\n  description: 'An object with an ID',\n})\nexport class NodeInterface {\n  @Field({\n    nullable: false,\n    description: 'The ID of the object',\n  })\n  id!: ResolvedGlobalId;\n}\n\nexport const typeNodeInterface = () => NodeInterface;\n\nexport const typeNodeInterfaces = () => [NodeInterface];\n\nexport const returnsNodeInterface = () => NodeInterface;\n\nexport const returnsNodeInterfaces = () => [NodeInterface];\n","import { Query, Args, Resolver } from '@nestjs/graphql';\nimport { returnsNodeInterface, returnsNodeInterfaces, NodeInterface } from './node.interface';\nimport { ResolvedGlobalId, typeResolvedGlobalId, typeResolvedGlobalIds } from '../global-id';\n\nexport type ResolvedNode =\n  | Promise<NodeInterface>\n  | NodeInterface\n  | Promise<null>\n  | null\n  | Promise<undefined>\n  | undefined;\n\nexport interface NodeResolver {\n  resolveNode(id: ResolvedGlobalId): ResolvedNode;\n}\n\n@Resolver(NodeInterface)\nexport class NodeFieldResolver implements NodeResolver {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  resolveNode(id: ResolvedGlobalId): ResolvedNode {\n    throw new Error('Method not implemented.');\n  }\n\n  @Query(returnsNodeInterface, {\n    name: 'node',\n    description: 'Fetches an object given its ID',\n    nullable: true,\n  })\n  node(\n    @Args({\n      name: 'id',\n      nullable: false,\n      description: 'The ID of an object',\n      type: typeResolvedGlobalId,\n    })\n    id: ResolvedGlobalId,\n  ): ResolvedNode {\n    return this.resolveNode(id);\n  }\n\n  @Query(returnsNodeInterfaces, {\n    name: 'nodes',\n    description: 'Fetches objects given their IDs',\n    nullable: 'items',\n  })\n  nodes(\n    @Args({\n      name: 'ids',\n      nullable: false,\n      description: 'The IDs of objects',\n      type: typeResolvedGlobalIds,\n    })\n    ids: ResolvedGlobalId[],\n  ): Promise<ResolvedNode[]> {\n    return Promise.all(ids.map((id) => Promise.resolve(this.resolveNode(id))));\n  }\n}\n","import { Int } from '@nestjs/graphql';\n\nexport const returnsInt = () => Int;\n","import { ArgsOptions, ReturnTypeFunc } from '@nestjs/graphql';\n\nconst BASE_KEY = 'nestjs-relay';\nconst METHOD_KEY = 'method';\nconst METHOD_METADATA_KEY = `${BASE_KEY}:${METHOD_KEY}`;\nconst CLASS_KEY = 'class';\nconst CLASS_METADATA_KEY = `${BASE_KEY}:${CLASS_KEY}`;\n\nexport interface MethodIdentifier {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  target: Object;\n  key: string | symbol;\n}\n\nexport type ParameterMetadata = Omit<ArgsOptions, 'type'> & {\n  typeFunc: ReturnTypeFunc;\n  paramIndex: number;\n};\n\nexport interface ClassIdentifier {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  target: Function;\n}\n\nexport type ClassMetadata = {\n  name: string;\n};\n\nexport class MetadataStorage {\n  static addMethodMetadata(args: MethodIdentifier & ParameterMetadata): void {\n    const { target, key, ...data } = args;\n    const existingMetadata = MetadataStorage.getMethodMetadata({ target, key });\n    const metadata = [...existingMetadata, data];\n    Reflect.defineMetadata(METHOD_METADATA_KEY, metadata, target, key);\n  }\n\n  static getMethodMetadata({ target, key }: MethodIdentifier): ParameterMetadata[] {\n    return Reflect.getMetadata(METHOD_METADATA_KEY, target, key) || [];\n  }\n\n  static addClassMetadata(args: ClassIdentifier & ClassMetadata): void {\n    const { target, ...data } = args;\n    const existingMetadata = MetadataStorage.getClassMetadata({ target });\n    const metadata = { ...existingMetadata, ...data };\n    Reflect.defineMetadata(CLASS_METADATA_KEY, metadata, target);\n  }\n\n  static getClassMetadata({ target }: ClassIdentifier): ClassMetadata {\n    return Reflect.getMetadata(CLASS_METADATA_KEY, target);\n  }\n}\n","import { ObjectTypeOptions, ObjectType } from '@nestjs/graphql';\nimport { isString } from 'util';\nimport { NodeInterface } from './node.interface';\nimport { MetadataStorage, AnyConstructor } from '../../common';\n\nexport function NodeType(): ClassDecorator;\n\nexport function NodeType(options: ObjectTypeOptions): ClassDecorator;\n\nexport function NodeType(name: string, options?: ObjectTypeOptions): ClassDecorator;\n\nexport function NodeType<T extends AnyConstructor<T>>(\n  nameOrOptions?: string | ObjectTypeOptions,\n  objectTypeOptions?: ObjectTypeOptions,\n): ClassDecorator {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (target: Function) => {\n    const [name, options = {}] = isString(nameOrOptions)\n      ? [nameOrOptions, objectTypeOptions]\n      : [target.name, nameOrOptions];\n\n    const interfaces = options.implements ? [].concat(options.implements as never) : [];\n\n    const nodeOptions: ObjectTypeOptions = {\n      ...options,\n      implements: interfaces.concat(NodeInterface as never),\n    };\n\n    MetadataStorage.addClassMetadata({ name, target });\n    ObjectType(name, nodeOptions)(target);\n  };\n}\n","import { ArgsOptions, ReturnTypeFunc } from '@nestjs/graphql';\nimport { MetadataStorage } from '../common';\n\nexport type InputArgOptions = Omit<ArgsOptions, 'name' | 'nullable' | 'type' | 'defaultValue'>;\n\nexport function InputArg<T>(\n  typeFunc: ReturnTypeFunc,\n  options?: InputArgOptions,\n): ParameterDecorator {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  return (target: Object, key: string | symbol, paramIndex: number) => {\n    MetadataStorage.addMethodMetadata({\n      ...options,\n      typeFunc,\n      target,\n      key,\n      paramIndex,\n    });\n  };\n}\n","export const capitalise = (text: string): string => text.charAt(0).toUpperCase() + text.slice(1);\n","export const getClientMutationId = (args: any[]): string => {\n  const relayArgIndex = args.findIndex((arg) => arg['clientMutationId']);\n  return args[relayArgIndex]?.clientMutationId || null;\n};\n","import { Field, InputType } from '@nestjs/graphql';\nimport { capitalise } from '../utils';\nimport { AnyConstructor, Mixin } from '../../common';\n\nexport const getInputName = (mutationName: string): string => capitalise(mutationName) + 'Input';\n\nexport type InputMixin = Mixin<typeof InputMixin>;\n\nexport function InputMixin<TBase extends AnyConstructor>(base: TBase, mutationName: string) {\n  const name = getInputName(mutationName);\n\n  @InputType(name)\n  class Input extends base {\n    @Field({\n      name: 'clientMutationId',\n      nullable: true,\n    })\n    clientMutationId?: string;\n  }\n\n  return Input;\n}\n","import { ArgsOptions } from '@nestjs/graphql';\nimport { InputMixin } from './input.mixin';\nimport { ParameterMetadata, AnyConstructor } from '../../common';\n\nexport interface CreateInputTypeArgs {\n  params: ParameterMetadata[];\n  mutationName: string;\n}\n\nexport type InputArgOptions = Pick<ArgsOptions, 'type' | 'description'> & {\n  paramIndex: number;\n};\n\nexport class InputArgFactory {\n  static create(args: CreateInputTypeArgs): InputArgOptions {\n    if (args.params.length === 0) {\n      /**\n       * No parameters registered\n       * -> Do not create input type for this mutation\n       */\n      throw new Error(`Not detected any RelayArg declarations in ${args.mutationName}.`);\n    }\n\n    if (args.params.length > 1) {\n      /**\n       * Throw error that multiple inputs have been registered\n       */\n      throw new Error(`Detected multiple RelayArg declarations in ${args.mutationName}.`);\n    }\n\n    /**\n     * Single argument\n     * Is an input type\n     * -> Add the clientMutationId field\n     */\n    const param = args.params[0];\n\n    const type = param.typeFunc() as AnyConstructor;\n    const inputType = InputMixin(type, args.mutationName);\n\n    return {\n      type: () => inputType,\n      paramIndex: param.paramIndex,\n      description: param.description,\n    };\n  }\n}\n","import { ObjectType, Field } from '@nestjs/graphql';\nimport { capitalise } from '../utils';\nimport { AnyConstructor, Mixin } from '../../common';\n\nexport const getPayloadName = (mutationName: string): string =>\n  capitalise(mutationName) + 'Payload';\n\nexport type PayloadMixin = Mixin<typeof PayloadMixin>;\n\nexport function PayloadMixin<TBase extends AnyConstructor>(base: TBase, mutationName: string) {\n  const name = getPayloadName(mutationName);\n\n  @ObjectType(name)\n  class Payload extends base {\n    @Field({\n      name: 'clientMutationId',\n      nullable: true,\n    })\n    clientMutationId?: string;\n  }\n\n  return Payload;\n}\n","import { ReturnTypeFunc } from '@nestjs/graphql';\nimport { PayloadMixin } from './payload.mixin';\nimport { AnyConstructor } from '../../common';\n\nexport interface CreatePayloadTypeArgs {\n  typeFunc: ReturnTypeFunc;\n  mutationName: string;\n}\n\nexport class PayloadTypeFactory {\n  static create(args: CreatePayloadTypeArgs): AnyConstructor {\n    const type = args.typeFunc() as AnyConstructor;\n    const payloadType = PayloadMixin(type, args.mutationName);\n    return payloadType;\n  }\n}\n","/** Returns true if `maybePromise` is a Promise. */\nexport const isPromise = <T>(maybePromise: T | Promise<T>): maybePromise is Promise<T> =>\n  Boolean(typeof (maybePromise as any)?.then === 'function');\n\nexport const ensurePromise = <T>(maybePromise: T | Promise<T>) =>\n  isPromise(maybePromise) ? maybePromise : Promise.resolve(maybePromise);\n","import { ReturnTypeFunc, MutationOptions, Mutation, Args } from '@nestjs/graphql';\nimport { MetadataStorage } from '../common/metadata-storage.class';\nimport { InputArgFactory } from './input-arg';\nimport { PayloadTypeFactory } from './payload-type';\nimport { getClientMutationId } from './utils';\nimport { ensurePromise } from './utils/ensure-promise';\n\nexport type RelayMutationOptions = Omit<MutationOptions, 'nullable'>;\n\nexport function RelayMutation<T>(\n  typeFunc: ReturnTypeFunc,\n  options?: RelayMutationOptions,\n): MethodDecorator {\n  return (target: Record<string, any>, key: string | symbol, descriptor: PropertyDescriptor) => {\n    const mutationName = options?.name ? options.name : String(key);\n\n    /**\n     * Resolver Interceptor\n     */\n    const originalMethod = descriptor.value;\n    descriptor.value = async function (...args: any[]) {\n      const clientMutationId = getClientMutationId(args);\n      const methodResult = await ensurePromise(originalMethod.apply(this, args));\n      return { ...methodResult, clientMutationId };\n    };\n\n    /**\n     * Input Type\n     */\n    const params = MetadataStorage.getMethodMetadata({ target, key });\n    const { paramIndex, ...argOptions } = InputArgFactory.create({ params, mutationName });\n    const inputArgOptions = {\n      name: 'input',\n      nullable: false,\n      ...argOptions,\n    };\n    Args(inputArgOptions)(target, key, paramIndex);\n\n    /**\n     * Payload Type\n     */\n    const payloadType = PayloadTypeFactory.create({ typeFunc, mutationName });\n    const mutationOptions: MutationOptions = {\n      ...options,\n      name: mutationName,\n      nullable: true,\n    };\n    Mutation(() => payloadType, mutationOptions)(target, key, descriptor);\n  };\n}\n","import { ArgsType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { returnsInt } from '../../common';\n\n@ArgsType()\nexport class BackwardConnectionArgs {\n  @Field(returnsInt)\n  last!: number;\n\n  @Field({ nullable: true })\n  before?: Relay.ConnectionCursor;\n}\n","import { Field, ArgsType, Int } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { returnsInt } from '../../common';\n\n@ArgsType()\nexport class ConnectionArgs implements Relay.ConnectionArguments {\n  @Field({\n    nullable: true,\n    description: 'Paginate before opaque cursor',\n  })\n  before?: Relay.ConnectionCursor;\n\n  @Field({\n    nullable: true,\n    description: 'Paginate after opaque cursor',\n  })\n  after?: Relay.ConnectionCursor;\n\n  @Field(returnsInt, { nullable: true, description: 'Paginate first' })\n  first?: number;\n\n  @Field(returnsInt, { nullable: true, description: 'Paginate last' })\n  last?: number;\n}\n","import { ArgsType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { returnsInt } from '../../common';\n\n@ArgsType()\nexport class ForwardConnectionArgs {\n  @Field(returnsInt)\n  first!: number;\n\n  @Field({ nullable: true })\n  after?: Relay.ConnectionCursor;\n}\n","import { ObjectType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\n\n@ObjectType()\nexport class PageInfo implements Relay.PageInfo {\n  @Field(() => Boolean)\n  hasNextPage!: boolean;\n\n  @Field(() => Boolean)\n  hasPreviousPage!: boolean;\n\n  @Field(() => String)\n  startCursor!: Relay.ConnectionCursor;\n\n  @Field(() => String)\n  endCursor!: Relay.ConnectionCursor;\n}\n","import { ReturnTypeFunc, ObjectType, Field } from '@nestjs/graphql';\nimport * as Relay from 'graphql-relay';\nimport { PageInfo } from './page-info.type';\nimport { AnyConstructor } from '../common';\n\nexport interface CreateConnectionTypeArgs {\n  nodeTypeFunc: ReturnTypeFunc;\n  nodeTypeName: string;\n}\n\nexport class ConnectionTypeFactory {\n  static create<T>(args: CreateConnectionTypeArgs): AnyConstructor<Relay.Connection<T>> {\n    const nodeType = args.nodeTypeFunc() as AnyConstructor;\n\n    @ObjectType(`${args.nodeTypeName}Edge`)\n    class Edge implements Relay.Edge<T> {\n      @Field(() => nodeType, {\n        nullable: true,\n      })\n      node!: T;\n\n      @Field(() => String)\n      cursor!: Relay.ConnectionCursor;\n    }\n\n    @ObjectType(`${args.nodeTypeName}Connection`)\n    class Connection implements Relay.Connection<T> {\n      @Field(() => [Edge], {\n        nullable: 'itemsAndList',\n      })\n      edges!: Edge[];\n\n      @Field(() => PageInfo)\n      pageInfo!: Relay.PageInfo;\n    }\n\n    return Connection;\n  }\n}\n","import { ReturnTypeFunc, FieldOptions, ResolveField } from '@nestjs/graphql';\nimport { ConnectionTypeFactory } from './connection-type.factory';\nimport { MetadataStorage } from '../common';\n\nexport type ResolveConnectionFieldOptions = Omit<FieldOptions, 'nullable'>;\n\nexport function ResolveConnectionField(\n  nodeTypeFunc: ReturnTypeFunc,\n  options?: ResolveConnectionFieldOptions,\n): MethodDecorator {\n  return (target: Record<string, any>, key: string | symbol, descriptor: PropertyDescriptor) => {\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    const nodeType = nodeTypeFunc() as Function;\n    const typeMetadata = MetadataStorage.getClassMetadata({ target: nodeType });\n\n    const connection = ConnectionTypeFactory.create({\n      nodeTypeFunc,\n      nodeTypeName: typeMetadata.name,\n    });\n\n    const resolveFieldOptions = { ...options, nullable: true };\n    ResolveField(() => connection, resolveFieldOptions)(target, key, descriptor);\n  };\n}\n"],"names":[],"mappings":"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"}